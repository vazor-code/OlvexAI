import asyncio
import logging
import sys
from os import getenv
from datetime import datetime
from openai import OpenAI
from dotenv import load_dotenv
import re
import html
import uuid
from urllib.parse import urlparse

from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message

load_dotenv()

class ColoredFormatter(logging.Formatter):
    COLORS = {
        'INFO': '\x1b[36m',
        'WARNING': '\x1b[33m',
        'ERROR': '\x1b[31m',
        'CRITICAL': '\x1b[35m',
        'DEBUG': '\x1b[37m',
        'RESET': '\x1b[0m'
    }

    def format(self, record):
        log_color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
        reset = self.COLORS['RESET']
        timestamp = datetime.now().strftime("%H:%M:%S")
        return f"{log_color}‚ö°Ô∏è[{timestamp}] {record.levelname:>8}{reset} [{record.name}] {record.getMessage()}"

logger = logging.getLogger("OlvexAI_Bot")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler(sys.stdout)
handler.setFormatter(ColoredFormatter())
logger.addHandler(handler)

logging.getLogger("aiogram").handlers.clear()
logging.getLogger("aiogram").addHandler(handler)
logging.getLogger("aiogram").setLevel(logging.INFO)

TOKEN = getenv("BOT_TOKEN")
AI_TOKEN = getenv("AI_TOKEN")
if not TOKEN or not AI_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –∏–ª–∏ AI_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env")

client = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=AI_TOKEN)

dp = Dispatcher()
router = Router()
openai_semaphore = asyncio.Semaphore(3)

# ---------------------------
# Sanitizer: —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ <b>, <i>, <u>, <s>, <a href="...">...</a>
# ---------------------------

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã (–Ω–µ–∂–∞–¥–Ω—ã–µ)
_link_pattern = re.compile(r'<a\s+href\s*=\s*["\']([^"\']*)["\']\s*>(.*?)</a>', re.IGNORECASE | re.DOTALL)
_b_pattern = re.compile(r'<b>(.*?)</b>', re.IGNORECASE | re.DOTALL)
_i_pattern = re.compile(r'<i>(.*?)</i>', re.IGNORECASE | re.DOTALL)
_u_pattern = re.compile(r'<u>(.*?)</u>', re.IGNORECASE | re.DOTALL)
_s_pattern = re.compile(r'<s>(.*?)</s>', re.IGNORECASE | re.DOTALL)

ALLOWED_SCHEMES = ("http", "https")

def _is_safe_href(href: str) -> bool:
    try:
        parsed = urlparse(href)
        if parsed.scheme.lower() in ALLOWED_SCHEMES and parsed.netloc:
            return True
    except Exception:
        return False
    return False

def sanitize_ai_html(text: str) -> str:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç HTML-—Å—Ç—Ä–æ–∫—É –æ—Ç –ò–ò –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π HTML,
    —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–µ–≥–∏ (<b>, <i>, <u>, <s>, <a href="...">).
    –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —ç—Å–∫–µ–π–ø–∏—Ç—Å—è.
    """

    placeholders = {}
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    def _make_token() -> str:
        return f"__PH_{uuid.uuid4().hex}__"

    # 1) –í—ã—Ä–µ–∂–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–µ–≥–∏, —Å–æ—Ö—Ä–∞–Ω–∏–º –∏—Ö –≤ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞—Ö.
    def _save_link(m):
        href = m.group(1)
        inner = m.group(2) or ""
        token = _make_token()
        placeholders[token] = ("a", href, inner)
        return token

    def _save_b(m):
        inner = m.group(1) or ""
        token = _make_token()
        placeholders[token] = ("b", inner)
        return token

    def _save_i(m):
        inner = m.group(1) or ""
        token = _make_token()
        placeholders[token] = ("i", inner)
        return token

    def _save_u(m):
        inner = m.group(1) or ""
        token = _make_token()
        placeholders[token] = ("u", inner)
        return token

    def _save_s(m):
        inner = m.group(1) or ""
        token = _make_token()
        placeholders[token] = ("s", inner)
        return token

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É (—Å—Å—ã–ª–∫–∏ —Å–Ω–∞—á–∞–ª–∞)
    temp = _link_pattern.sub(_save_link, text)
    temp = _b_pattern.sub(_save_b, temp)
    temp = _i_pattern.sub(_save_i, temp)
    temp = _u_pattern.sub(_save_u, temp)
    temp = _s_pattern.sub(_save_s, temp)

    # 2) –≠—Å–∫–µ–π–ø–∏–º –≤—Å—ë, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å (—ç—Ç–æ —É–¥–∞–ª–∏—Ç –ª—é–±—ã–µ –Ω–µ–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏)
    escaped = html.escape(temp)

    # 3) –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–∞–¥ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ–≥–∏ (—Å —ç—Å–∫–µ–π–ø–æ–º –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π href)
    for token, data in placeholders.items():
        if data[0] == "a":
            _, href, inner = data
            inner_esc = html.escape(inner)
            if _is_safe_href(href):
                href_esc = html.escape(href, quote=True)
                replacement = f'<a href="{href_esc}">{inner_esc}</a>'
            else:
                # –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π href ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ (–±–µ–∑ —Ç–µ–≥–∞)
                replacement = inner_esc
        elif data[0] == "b":
            replacement = f"<b>{html.escape(data[1])}</b>"
        elif data[0] == "i":
            replacement = f"<i>{html.escape(data[1])}</i>"
        elif data[0] == "u":
            replacement = f"<u>{html.escape(data[1])}</u>"
        elif data[0] == "s":
            replacement = f"<s>{html.escape(data[1])}</s>"
        else:
            replacement = html.escape(str(data))

        # token –≤ escaped –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω html.escape'–æ–º, –ø–æ—Ç–æ–º—É —á—Ç–æ
        # token —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö ASCII-—Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–ø–æ–¥—á—ë—Ä–∫–∏).
        escaped = escaped.replace(token, replacement)

    return escaped

# ---------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã
# ---------------------------

@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    user = message.from_user
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-–ø–∞—Ä—Å–∏–Ω–≥, –ø–æ—ç—Ç–æ–º—É —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è
    safe_name = html.escape(user.full_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, <b>{safe_name}</b>! üëã\n\n"
        "üß† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>OlvexAI</b> ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–Ø –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –ø–∏—Å–∞—Ç—å –∫–æ–¥, –æ–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω–æ–µ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ –ø–æ–µ—Ö–∞–ª–∏."
    )

    logger.info(f"üëã /start –æ—Ç {user.full_name} (id={user.id})")
    # –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º parse_mode=HTML ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –∏ –ø–æ–Ω—è—Ç–Ω–µ–µ
    await message.answer(welcome_text, parse_mode=ParseMode.HTML)

@router.message()
async def echo_handler(message: Message) -> None:
    user = message.from_user
    logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.full_name}: {message.text}")

    thinking_msg = await message.answer("üí≠ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    try:
        async with openai_semaphore:
            completion = await asyncio.to_thread(
                lambda: client.chat.completions.create(
                    model="deepseek/deepseek-chat-v3.1",
                    messages=[
                        {
                            "role": "system",
                            "content": (
                                "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ HTML-—Ç–µ–≥–∏: "
                                "<b>, <i>, <u>, <s>, <a>. "
                                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code> –∏–ª–∏ <pre> ‚Äî –∏—Ö Telegram –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç."
                            ),
                        },
                        {"role": "user", "content": message.text},
                    ],
                    temperature=0.7,
                )
            )

        ai_reply = completion.choices[0].message.content.strip()
        # –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º HTML –æ—Ç –ò–ò, —Ä–∞–∑—Ä–µ—à–∞—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–µ–≥–∏
        formatted_reply = sanitize_ai_html(ai_reply)
        await thinking_msg.delete()

        MAX_LEN = 4096
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º, –Ω–∞—Ä–µ–∑–∞—è –ø–æ –ª–∏–º–∏—Ç—É Telegram
        if len(formatted_reply) <= MAX_LEN:
            await message.answer(formatted_reply, parse_mode=ParseMode.HTML)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ ‚Äî –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º,
            # –Ω–æ –±–∞–∑–æ–≤–∞—è –Ω–∞—Ä–µ–∑–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
            for i in range(0, len(formatted_reply), MAX_LEN):
                chunk = formatted_reply[i:i + MAX_LEN]
                await message.answer(chunk, parse_mode=ParseMode.HTML)

        logger.info(f"ü§ñ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name}: {ai_reply[:80]}...")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek: {e}")
        try:
            await thinking_msg.delete()
        except Exception:
            pass
        err = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        await message.answer(html.escape(err), parse_mode=ParseMode.HTML)

async def main() -> None:
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTML –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp.include_router(router)

    logger.info("üöÄ –ë–æ—Ç OlvexAI –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üí§ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.critical(f"üõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
