import asyncio
import logging
import sys
from os import getenv
from datetime import datetime
from openai import OpenAI
from dotenv import load_dotenv
import re
import html
import uuid
from urllib.parse import urlparse
from io import StringIO

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¶–≤–µ—Ç–Ω–æ–π –ª–æ–≥–≥–µ—Ä
class ColoredFormatter(logging.Formatter):
    COLORS = {
        'INFO': '\x1b[36m', 'WARNING': '\x1b[33m', 'ERROR': '\x1b[31m',
        'CRITICAL': '\x1b[35m', 'DEBUG': '\x1b[37m', 'RESET': '\x1b[0m'
    }

    def format(self, record):
        color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
        reset = self.COLORS['RESET']
        timestamp = datetime.now().strftime("%H:%M:%S")
        return f"{color}‚ö°Ô∏è[{timestamp}] {record.levelname:>8}{reset} [{record.name}] {record.getMessage()}"

logger = logging.getLogger("OlvexAI_Bot")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler(sys.stdout)
handler.setFormatter(ColoredFormatter())
logger.addHandler(handler)

logging.getLogger("aiogram").handlers.clear()
logging.getLogger("aiogram").addHandler(handler)
logging.getLogger("aiogram").setLevel(logging.INFO)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
TOKEN = getenv("BOT_TOKEN")
AI_TOKEN = getenv("AI_TOKEN")
if not TOKEN or not AI_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –∏–ª–∏ AI_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env")

# ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω—ã –í–°–ï –ø—Ä–æ–±–µ–ª—ã –≤ URL!
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=AI_TOKEN
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
dp = Dispatcher()
router = Router()
openai_semaphore = asyncio.Semaphore(3)

# ---------------------------
# –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–¥–∞ –∏ HTML
# ---------------------------

_code_block_pattern = re.compile(r'```(\w*)\s*\n(.*?)\n```', re.DOTALL | re.IGNORECASE)
_link_pattern = re.compile(r'<a\s+href\s*=\s*["\']([^"\']*)["\']\s*>(.*?)</a>', re.IGNORECASE | re.DOTALL)
_b_pattern = re.compile(r'<b>(.*?)</b>', re.IGNORECASE | re.DOTALL)
_i_pattern = re.compile(r'<i>(.*?)</i>', re.IGNORECASE | re.DOTALL)
_u_pattern = re.compile(r'<u>(.*?)</u>', re.IGNORECASE | re.DOTALL)
_s_pattern = re.compile(r'<s>(.*?)</s>', re.IGNORECASE | re.DOTALL)

ALLOWED_SCHEMES = ("http", "https")

def _is_safe_href(href: str) -> bool:
    try:
        parsed = urlparse(href)
        return parsed.scheme.lower() in ALLOWED_SCHEMES and bool(parsed.netloc)
    except Exception:
        return False

def extract_code_blocks(text: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞: (–æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç, [(—è–∑—ã–∫, –∫–æ–¥)])"""
    codes = []
    parts = []
    last_end = 0

    for match in _code_block_pattern.finditer(text):
        if match.start() > last_end:
            parts.append(('text', text[last_end:match.start()]))
        lang = match.group(1).strip() or "txt"
        code = match.group(2).strip('\n')
        codes.append((lang, code))
        last_end = match.end()

    if last_end < len(text):
        parts.append(('text', text[last_end:]))

    return parts, codes

def sanitize_ai_html(text: str) -> str:
    """–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ HTML-—Ç–µ–≥–∏."""
    placeholders = {}

    def make_token():
        return f"__PH_{uuid.uuid4().hex}__"

    temp = text
    temp = _link_pattern.sub(lambda m: (t := make_token(), placeholders.update({t: ("a", m.group(1), m.group(2))}) or t)[-1], temp)
    temp = _b_pattern.sub(lambda m: (t := make_token(), placeholders.update({t: ("b", m.group(1))}) or t)[-1], temp)
    temp = _i_pattern.sub(lambda m: (t := make_token(), placeholders.update({t: ("i", m.group(1))}) or t)[-1], temp)
    temp = _u_pattern.sub(lambda m: (t := make_token(), placeholders.update({t: ("u", m.group(1))}) or t)[-1], temp)
    temp = _s_pattern.sub(lambda m: (t := make_token(), placeholders.update({t: ("s", m.group(1))}) or t)[-1], temp)

    escaped = html.escape(temp)

    for token, data in placeholders.items():
        tag = data[0]
        if tag == "a":
            href, inner = data[1], data[2]
            inner_esc = html.escape(inner)
            if _is_safe_href(href):
                href_esc = html.escape(href, quote=True)
                replacement = f'<a href="{href_esc}">{inner_esc}</a>'
            else:
                replacement = inner_esc
        elif tag == "b":
            replacement = f"<b>{html.escape(data[1])}</b>"
        elif tag == "i":
            replacement = f"<i>{html.escape(data[1])}</i>"
        elif tag == "u":
            replacement = f"<u>{html.escape(data[1])}</u>"
        elif tag == "s":
            replacement = f"<s>{html.escape(data[1])}</s>"
        else:
            replacement = html.escape(str(data))
        escaped = escaped.replace(token, replacement)

    return escaped

# –û—á–∏—Å—Ç–∫–∞ –º—É—Å–æ—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
def clean_ai_response(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: <s>, [OUT],  <im_start>, –∏ —Ç.–ø.
    """
    text = re.sub(r'<\|.*?\|>', '', text)
    text = re.sub(r'\[\/?OUT\]', '', text)
    text = re.sub(r'<<SYS>>.*?<<\/SYS>>', '', text, flags=re.DOTALL)
    text = re.sub(r'<\|im_start\|>.*?<\|im_end\|>', '', text, flags=re.DOTALL)
    text = re.sub(r'^<s>\s*', '', text)
    text = re.sub(r'\s*</s>$', '', text)
    return text.strip()

# ---------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ---------------------------

user_context = {}
user_model = {}
user_last_message = {}
FLOOD_COOLDOWN = 1.5

# üÜï –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ë–ï–°–ü–õ–ê–¢–ù–´–ï –º–æ–¥–µ–ª–∏ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞ OpenRouter)
AVAILABLE_MODELS = {
    # DeepSeek
    "deepseek": "deepseek/deepseek-chat-v3.1",
    "r1": "deepseek/deepseek-r1-0528",
    "qwen8b": "deepseek/deepseek-r1-0528-qwen3-8b",

    # Mistral
    "mistral": "mistralai/mistral-small-3.2-24b-instruct",

    # Qwen
    "qwen": "qwen/qwen3-coder",
    "qwen4b": "qwen/qwen3-4b",

    # Google
    "gemma": "google/gemma-3n-e4b-it",

    # OpenAI OSS
    "gpt20b": "openai/gpt-oss-20b",
}

# –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
MODEL_NAMES = {
    "deepseek": "üß† DeepSeek Chat v3.1",
    "r1": "üöÄ DeepSeek R1 (0528)",
    "qwen8b": "üß© DeepSeek + Qwen3 8B",
    "mistral": "üî• Mistral Small 24B",
    "qwen": "üíª Qwen3 Coder",
    "qwen4b": "üß† Qwen3 4B",
    "gemma": "üü¢ Google Gemma 3n E4B",
    "gpt20b": "üîµ GPT-OSS 20B",
}

# ---------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã
# ---------------------------

@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    user = message.from_user
    safe_name = html.escape(user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, <b>{safe_name}</b>! üëã\n\n"
        "üß† –Ø ‚Äî –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É.\n\n"
        "<i>–ö–æ–¥ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫—Ä–∞—Å–∏–≤–æ ‚Äî –µ–≥–æ –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º.</i>\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help ‚Äî —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."
    )
    logger.info(f"üëã /start –æ—Ç {user.full_name}")
    await message.answer(welcome_text, parse_mode=ParseMode.HTML)


@router.message(F.text.startswith("/help"))
async def help_command(message: Message):
    models_list = "\n".join([f"üî∏ <code>/{key}</code> ‚Äî {value}" for key, value in MODEL_NAMES.items()])
    
    help_text = (
        "üìö <b>OlvexAI | DeepSeek</b>\n"
        "–£–º–Ω—ã–π –±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "üîπ <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "üî∏ <code>/start</code> ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "üî∏ <code>/help</code> ‚Äî —ç—Ç–æ –º–µ–Ω—é\n"
        "üî∏ <code>/model</code> ‚Äî —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å\n\n"
        f"üîπ <b>–ú–æ–¥–µ–ª–∏:</b>\n{models_list}\n\n"
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (.txt, .py, .js –∏ –¥—Ä.) ‚Äî —è –ø—Ä–æ—á–∏—Ç–∞—é –∏ –æ–±—ä—è—Å–Ω—é.\n\n"
        "üí° –ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –º–æ–∂–Ω–æ –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥.\n"
        "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä–∞ –º–æ–≥—É—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è.\n"
        "üë§ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: @vazor_code"
    )
    await message.answer(help_text, parse_mode=ParseMode.HTML)


@router.message(F.text.startswith("/model"))
async def change_model(message: Message):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    
    if len(args) == 1:
        current_model = user_model.get(user_id, "deepseek/deepseek-chat-v3.1")
        model_key = next((k for k, v in AVAILABLE_MODELS.items() if v == current_model), "deepseek")
        display_name = MODEL_NAMES.get(model_key, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è")
        await message.answer(
            f"üîπ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <b>{display_name}</b> (<code>{model_key}</code>)\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ:\n"
            "/model deepseek ‚Äî DeepSeek Chat v3.1\n"
            "/model r1 ‚Äî DeepSeek R1 0528\n"
            "/model mistral ‚Äî Mistral Small 24B\n"
            "/model qwen ‚Äî Qwen3 Coder\n"
            "/model gemma ‚Äî Google Gemma 3n E4B",
            parse_mode=ParseMode.HTML
        )
        return

    model_key = args[1].strip().lower()
    if model_key not in AVAILABLE_MODELS:
        available_list = ", ".join(AVAILABLE_MODELS.keys())
        await message.answer(f"‚ùå –ú–æ–¥–µ–ª—å '{model_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_list}")
        return

    user_model[user_id] = AVAILABLE_MODELS[model_key]
    display_name = MODEL_NAMES[model_key]
    await message.answer(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{display_name}</b>", parse_mode=ParseMode.HTML)


# –ö—Ä–∞—Ç–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
for model_key in AVAILABLE_MODELS:

    @router.message(F.text == f"/{model_key}")
    async def quick_model_switch(message: Message, key=model_key):
        user_id = message.from_user.id
        user_model[user_id] = AVAILABLE_MODELS[key]
        display_name = MODEL_NAMES[key]
        await message.answer(f"‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: <b>{display_name}</b>", parse_mode=ParseMode.HTML)


@router.message(F.document)
async def handle_document(message: Message):
    user_id = message.from_user.id
    file = message.document
    file_name = file.file_name or "–±–µ–∑_–∏–º–µ–Ω–∏.txt"

    if not file_name.lower().endswith(('.txt', '.py', '.js', '.html', '.css', '.md', '.json', '.yaml', '.yml')):
        await message.answer("‚ùå –Ø –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt, .py, .js, .md –∏ —Ç.–¥.)")
        return

    thinking_msg = None  # –û–±—ä—è–≤–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ

    try:
        file_path = await message.bot.download(file)
        
        # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º file_path –∫–∞–∫ –ø—É—Ç—å
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        if len(content) > 4096:
            content = content[:4096] + "\n... [–æ–±—Ä–µ–∑–∞–Ω–æ]"

        thinking_msg = await message.answer("üìÑ –ß–∏—Ç–∞—é —Ñ–∞–π–ª...")

        async with openai_semaphore:
            completion = await asyncio.to_thread(
                lambda: client.chat.completions.create(
                    model=user_model.get(user_id, "deepseek/deepseek-chat-v3.1"),
                    messages=[
                        {"role": "system", "content": "–û–±—ä—è—Å–Ω–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."},
                        {"role": "user", "content": f"–§–∞–π–ª: {file_name}\n\n{content}"}
                    ],
                    temperature=0.7,
                )
            )

        raw_reply = completion.choices[0].message.content.strip()
        cleaned_reply = clean_ai_response(raw_reply)
        non_code_parts, code_blocks = extract_code_blocks(cleaned_reply)

        await thinking_msg.delete()

        if non_code_parts:
            full_text = ''.join(part for _, part in non_code_parts)
            clean_text = sanitize_ai_html(full_text)
            MAX_LEN = 4096
            for i in range(0, len(clean_text), MAX_LEN):
                chunk = clean_text[i:i + MAX_LEN]
                await message.answer(chunk, parse_mode=ParseMode.HTML)

        MAX_MESSAGE_LENGTH = 4096 - 100
        for lang, code in code_blocks:
            code_lines = code.strip().splitlines()
            chunk = ""
            current_length = 0

            def make_code_block(text):
                return f'<pre><code class="language-{html.escape(lang)}">{html.escape(text)}</code></pre>'

            for line in code_lines:
                line_escaped = html.escape(line) + "\n"
                if current_length + len(line_escaped) > MAX_MESSAGE_LENGTH:
                    if chunk:
                        await message.answer(make_code_block(chunk), parse_mode=ParseMode.HTML)
                    chunk = line
                    current_length = len(line_escaped)
                else:
                    chunk += line + "\n"
                    current_length += len(line_escaped)

            if chunk.strip():
                await message.answer(make_code_block(chunk), parse_mode=ParseMode.HTML)

        logger.info(f"‚úÖ –§–∞–π–ª {file_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        if thinking_msg:
            await thinking_msg.delete()
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")


@router.message(F.text)
async def echo_handler(message: Message) -> None:
    user_id = message.from_user.id
    now = asyncio.get_event_loop().time()

    if user_id in user_last_message and now - user_last_message[user_id] < FLOOD_COOLDOWN:
        return
    user_last_message[user_id] = now

    user_text = message.text.strip()
    logger.info(f"üì® –û—Ç {message.from_user.full_name}: {user_text}")

    thinking_msg = None
    try:
        model = user_model.get(user_id, "deepseek/deepseek-chat-v3.1")

        if user_id not in user_context:
            user_context[user_id] = []

        user_context[user_id].append({"role": "user", "content": user_text})

        messages = [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
                    "‚Ä¢ –î–ª—è –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: ```py\\n–∫–æ–¥\\n```\n"
                    "‚Ä¢ –î–ª—è —Å—Å—ã–ª–æ–∫: <a href='https://example.com'>—Ç–µ–∫—Å—Ç</a>\n"
                    "‚Ä¢ –ñ–∏—Ä–Ω—ã–π: <b>—Ç–µ–∫—Å—Ç</b>, –∫—É—Ä—Å–∏–≤: <i>—Ç–µ–∫—Å—Ç</i>\n"
                    "‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π <pre> –∏–ª–∏ <code> –≤ –æ—Ç–≤–µ—Ç–µ."
                ),
            }
        ] + user_context[user_id]

        thinking_msg = await message.answer("üí≠ –î—É–º–∞—é...")

        async with openai_semaphore:
            completion = await asyncio.to_thread(
                lambda: client.chat.completions.create(
                    model=model,
                    messages=messages,
                    temperature=0.7,
                )
            )

        raw_reply = completion.choices[0].message.content.strip()
        cleaned_reply = clean_ai_response(raw_reply)
        user_context[user_id].append({"role": "assistant", "content": cleaned_reply})

        non_code_parts, code_blocks = extract_code_blocks(cleaned_reply)

        await thinking_msg.delete()

        if non_code_parts:
            full_text = ''.join(part for _, part in non_code_parts)
            clean_text = sanitize_ai_html(full_text)
            MAX_LEN = 4096
            for i in range(0, len(clean_text), MAX_LEN):
                chunk = clean_text[i:i + MAX_LEN]
                await message.answer(chunk, parse_mode=ParseMode.HTML)

        MAX_MESSAGE_LENGTH = 4096 - 100
        for lang, code in code_blocks:
            code_lines = code.strip().splitlines()
            chunk = ""
            current_length = 0

            def make_code_block(text):
                return f'<pre><code class="language-{html.escape(lang)}">{html.escape(text)}</code></pre>'

            for line in code_lines:
                line_escaped = html.escape(line) + "\n"
                if current_length + len(line_escaped) > MAX_MESSAGE_LENGTH:
                    if chunk:
                        await message.answer(make_code_block(chunk), parse_mode=ParseMode.HTML)
                    chunk = line
                    current_length = len(line_escaped)
                else:
                    chunk += line + "\n"
                    current_length += len(line_escaped)

            if chunk.strip():
                await message.answer(make_code_block(chunk), parse_mode=ParseMode.HTML)

        logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        if thinking_msg:
            try:
                await thinking_msg.delete()
            except Exception:
                pass
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ---------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ---------------------------

async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp.include_router(router)
    logger.info("üöÄ OlvexAI Bot –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üí§ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.critical(f"üõë –û—à–∏–±–∫–∞: {e}")