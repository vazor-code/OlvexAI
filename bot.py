import asyncio
import logging
import sys
from os import getenv
from datetime import datetime
from openai import OpenAI
from dotenv import load_dotenv
import re
import html
import uuid
from urllib.parse import urlparse
from io import StringIO

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

# ---------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
# ---------------------------
load_dotenv()

class ColoredFormatter(logging.Formatter):
    COLORS = {
        'INFO': '\x1b[36m', 'WARNING': '\x1b[33m', 'ERROR': '\x1b[31m',
        'CRITICAL': '\x1b[35m', 'DEBUG': '\x1b[37m', 'RESET': '\x1b[0m'
    }

    def format(self, record):
        color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
        reset = self.COLORS['RESET']
        timestamp = datetime.now().strftime("%H:%M:%S")
        return f"{color}‚ö°Ô∏è[{timestamp}] {record.levelname:>8}{reset} [{record.name}] {record.getMessage()}"

logger = logging.getLogger("OlvexAI_Bot")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler(sys.stdout)
handler.setFormatter(ColoredFormatter())
logger.addHandler(handler)
logging.getLogger("aiogram").handlers.clear()
logging.getLogger("aiogram").addHandler(handler)
logging.getLogger("aiogram").setLevel(logging.INFO)

# ---------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
# ---------------------------
TOKEN = getenv("BOT_TOKEN")
AI_TOKEN = getenv("AI_TOKEN")
if not TOKEN or not AI_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –∏–ª–∏ AI_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env")

client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=AI_TOKEN
)

dp = Dispatcher()
router = Router()
openai_semaphore = asyncio.Semaphore(3)

# ---------------------------
# –ú–æ–¥–µ–ª–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
# ---------------------------
user_context = {}
user_model = {}
user_last_message = {}
FLOOD_COOLDOWN = 1.5

AVAILABLE_MODELS = {
    "deepseek": "deepseek/deepseek-chat-v3-0324:free",
    "r1": "deepseek/deepseek-r1-0528:free",
    "mistral": "mistralai/mistral-small-3.2-24b-instruct:free",
    "qwen": "qwen/qwen3-coder:free",
    "gptoss": "openai/gpt-oss-20b:free",
}

MODEL_NAMES = {
    "deepseek": "üß† DeepSeek Chat v3.0324",
    "r1": "üöÄ DeepSeek R1 (0528)",
    "mistral": "üî• Mistral Small 24B",
    "qwen": "üíª Qwen3 Coder",
    "gptoss": "üîµ GPT-OSS 20B",
}

# –ü–æ—Ä—è–¥–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ 429
MODEL_FALLBACK_ORDER = ["deepseek", "r1", "mistral", "qwen", "gptoss"]

# ---------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ---------------------------
def clean_ai_response(text: str) -> str:
    text = re.sub(r'<\|.*?\|>', '', text)
    text = re.sub(r'\[\/?OUT\]', '', text)
    text = re.sub(r'<<SYS>>.*?<<\/SYS>>', '', text, flags=re.DOTALL)
    text = re.sub(r'<\|im_start\|>.*?<\|im_end\|>', '', text, flags=re.DOTALL)
    text = re.sub(r'^<s>\s*', '', text)
    text = re.sub(r'\s*</s>$', '', text)
    return text.strip()

# ---------------------------
# üÜï Safe OpenAI Call
# ---------------------------
async def safe_openai_call(user_id: int, user_text: str, message: Message, temperature: float = 0.7):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π.
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —á–∞—Ç.
    """
    models_cycle = list(AVAILABLE_MODELS.values())
    start_index = models_cycle.index(user_model.get(user_id, models_cycle[0]))
    
    for i in range(len(models_cycle)):
        model = models_cycle[(start_index + i) % len(models_cycle)]
        user_model[user_id] = model
        display_name = next((name for key, name in MODEL_NAMES.items() if AVAILABLE_MODELS[key] == model), model)
        
        try:
            async with openai_semaphore:
                # –ü–µ—Ä–µ–¥–∞–µ–º temperature –≤–Ω—É—Ç—Ä–∏
                completion = await asyncio.to_thread(
                    lambda: client.chat.completions.create(
                        model=model,
                        messages=[
                            {"role": "system", "content": "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º."},
                            {"role": "user", "content": user_text}
                        ],
                        temperature=temperature,
                    )
                )
            return completion.choices[0].message.content.strip()
        
        except Exception as e:
            error_str = str(e)
            if "429" in error_str or "rate-limited" in error_str.lower():
                logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {display_name} –∏—Å—á–µ—Ä–ø–∞–ª–∞ –ª–∏–º–∏—Ç. –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é...")
                await message.answer(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å <b>{display_name}</b> –∏—Å—á–µ—Ä–ø–∞–ª–∞ –ª–∏–º–∏—Ç. –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é...", parse_mode=ParseMode.HTML)
                continue
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ {display_name}: {error_str}")
                raise e

    raise RuntimeError("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ---------------------------
# /help
# ---------------------------
@router.message(F.text.startswith("/help"))
async def help_command(message: Message):
    help_text = (
        "üìö <b>OlvexAI</b>\n"
        "–£–º–Ω—ã–π –±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "üîπ <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "üî∏ <code>/start</code> ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "üî∏ <code>/help</code> ‚Äî —ç—Ç–æ –º–µ–Ω—é\n"
        "üî∏ <code>/model</code> ‚Äî –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å\n\n"
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (.txt, .py, .js –∏ –¥—Ä.) ‚Äî —è –ø—Ä–æ—á–∏—Ç–∞—é –∏ –æ–±—ä—è—Å–Ω—é.\n\n"
        "üí° –ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –º–æ–∂–Ω–æ –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥.\n"
        "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä–∞ –º–æ–≥—É—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è.\n"
        "üë§ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: @vazor_code"
    )
    await message.answer(help_text, parse_mode=ParseMode.HTML)

# ---------------------------
# /model
# ---------------------------
@router.message(F.text.startswith("/model"))
async def change_model(message: Message):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –º–æ–¥–µ–ª—å –≤—Ä—É—á–Ω—É—é
    if len(args) > 1:
        model_key = args[1].strip().lower()
        if model_key in AVAILABLE_MODELS:
            user_model[user_id] = AVAILABLE_MODELS[model_key]
            display_name = MODEL_NAMES.get(model_key, model_key)
            await message.answer(
                f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{display_name}</b> (<code>{model_key}</code>)",
                parse_mode=ParseMode.HTML
            )
        else:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ /model, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    # –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å
    current_model = user_model.get(user_id, "deepseek/deepseek-chat-v3-0324:free")
    model_key = next((k for k, v in AVAILABLE_MODELS.items() if v == current_model), "deepseek")
    display_name = MODEL_NAMES.get(model_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")

    text = (
        f"ü§ñ <b>–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏</b>\n\n"
        f"üîπ <b>–¢–µ–∫—É—â–∞—è:</b> {display_name} (<code>{model_key}</code>)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∏–∂–µ üëá"
    )

    grouped_models = {
        "üß† DeepSeek": ["deepseek", "r1"],
        "üî• Mistral": ["mistral"],
        "üíª Qwen": ["qwen"],
        "üîµ OpenAI": ["gptoss"]
    }

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_models")]]
    )

    rows = []
    for group_name, keys in grouped_models.items():
        rows.append([InlineKeyboardButton(text=group_name, callback_data="none")])
        for key in keys:
            model_text = MODEL_NAMES.get(key, key)
            rows.append([InlineKeyboardButton(text=model_text, callback_data=f"set_model:{key}")])
        rows.append([InlineKeyboardButton(text="‚Äî", callback_data="none")])
    keyboard.inline_keyboard = rows

    await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard)


@router.callback_query(F.data.startswith("set_model:"))
async def set_model_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    model_key = callback.data.split(":", 1)[1]

    if model_key in AVAILABLE_MODELS:
        user_model[user_id] = AVAILABLE_MODELS[model_key]
        display_name = MODEL_NAMES.get(model_key, model_key)
        await callback.message.edit_text(
            f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{display_name}</b> (<code>{model_key}</code>)\n\n"
            "üí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å üëá",
            parse_mode=ParseMode.HTML
        )
        await callback.answer("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ ‚úÖ")
    else:
        await callback.answer("‚ùå –¢–∞–∫–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç", show_alert=True)

# ---------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
# ---------------------------
@router.message(CommandStart())
async def command_start_handler(message: Message):
    user = message.from_user
    safe_name = html.escape(user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, <b>{safe_name}</b>! üëã\n\n"
        "üß† –Ø ‚Äî –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É.\n\n"
        "<i>–ö–æ–¥ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫—Ä–∞—Å–∏–≤–æ ‚Äî –µ–≥–æ –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º.</i>\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help ‚Äî —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n"
        "üîπ –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å ‚Äî /model"
    )
    logger.info(f"üëã /start –æ—Ç {user.full_name}")
    await message.answer(welcome_text, parse_mode=ParseMode.HTML)

# ---------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ---------------------------
@router.message(F.text)
async def echo_handler(message: Message):
    user_id = message.from_user.id
    now = asyncio.get_event_loop().time()

    if user_id in user_last_message and now - user_last_message[user_id] < FLOOD_COOLDOWN:
        return
    user_last_message[user_id] = now

    user_text = message.text.strip()
    logger.info(f"üì® –û—Ç {message.from_user.full_name}: {user_text}")

    thinking_msg = await message.answer("üí≠ –î—É–º–∞—é...")

    if user_id not in user_context:
        user_context[user_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    user_context[user_id].append({"role": "user", "content": user_text})

    messages = [
        {"role": "system", "content": (
            "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
            "‚Ä¢ –î–ª—è –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: ```py\\n–∫–æ–¥\\n```\n"
            "‚Ä¢ –î–ª—è —Å—Å—ã–ª–æ–∫: <a href='https://example.com'>—Ç–µ–∫—Å—Ç</a>\n"
            "‚Ä¢ –ñ–∏—Ä–Ω—ã–π: <b>—Ç–µ–∫—Å—Ç</b>, –∫—É—Ä—Å–∏–≤: <i>—Ç–µ–∫—Å—Ç</i>\n"
            "‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π <pre> –∏–ª–∏ <code> –≤ –æ—Ç–≤–µ—Ç–µ."
        )}
    ] + user_context[user_id]

    try:
        # –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        raw_reply = await safe_openai_call(user_id, messages, message)
        cleaned_reply = clean_ai_response(raw_reply)
        user_context[user_id].append({"role": "assistant", "content": cleaned_reply})

        await message.answer(cleaned_reply, parse_mode=ParseMode.HTML)
        logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ thinking_msg
        if thinking_msg:
            try:
                await thinking_msg.delete()
            except Exception:
                pass

# ---------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ---------------------------
async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp.include_router(router)
    logger.info("üöÄ OlvexAI Bot –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üí§ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.critical(f"üõë –û—à–∏–±–∫–∞: {e}")